// gen_dataset.cpp  ── creates a Record file with unique keys
#include <fstream>
#include <iostream>
#include <vector>
#include <cstdint>
#include <cstring>
#include <cctype>

/* -------- splitmix64: 1-1 permutation on 64 bits (unique keys) ---- */
static inline uint64_t splitmix64(uint64_t x) {
    x += 0x9e3779b97f4a7c15ULL;
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9ULL;
    x = (x ^ (x >> 27)) * 0x94d049bb133111ebULL;
    return x ^ (x >> 31);
}

/* -------- parser K / M / G ----------------------------------------- */
static std::size_t parse_size(std::string s) {
    std::size_t m = 1; char c = s.back();
    if (c=='K'||c=='k') m = 1'000ULL;
    else if (c=='M'||c=='m') m = 1'000'000ULL;
    else if (c=='G'||c=='g') m = 1'000'000'000ULL;
    if (!std::isdigit(c)) s.pop_back();
    return std::stoull(s) * m;
}

/**
 * @brief Main function to generate a binary dataset file.
 *
 * Parses command-line arguments to determine the number of records, payload size, and output file name.
 * Writes a binary file with a header containing the number of records and payload size, followed by records.
 * Each record consists of a 64-bit key (generated by splitmix64) and a payload of specified size filled with zeros.
 *
 * Command-line options:
 *   -s <size>    : Number of records to generate (required).
 *   -r <payload> : Size of the payload in bytes for each record (optional, default: 8).
 *   -o <file>    : Output file name (optional, default: "dataset.bin").
 *
 * @param argc Number of command-line arguments.
 * @param argv Array of command-line argument strings.
 * @return int Returns 0 on success, 1 on error (e.g., missing required arguments or file open failure).
 */
int main(int argc,char* argv[]) {
    std::size_t N = 0;                 // #records
    std::size_t P = 8;                 // payload bytes
    const char*  fname = "dataset.bin";

    for (int i=1;i<argc;++i) {
        if (!std::strcmp(argv[i],"-s") && i+1<argc) N = parse_size(argv[++i]);
        else if (!std::strcmp(argv[i],"-r") && i+1<argc) P = parse_size(argv[++i]);
        else if (!std::strcmp(argv[i],"-o") && i+1<argc) fname = argv[++i];
    }
    if (!N) {
        std::cerr<<"Usage: gen_dataset -s <size> [-r payload] [-o file]\n";
        return 1;
    }

    std::ofstream out(fname,std::ios::binary);
    if (!out){ std::cerr<<"cannot open "<<fname<<"\n"; return 1; }

    /* header */
    uint64_t N64 = N;  uint32_t P32 = static_cast<uint32_t>(P); uint32_t pad=0;
    out.write(reinterpret_cast<char*>(&N64),8);
    out.write(reinterpret_cast<char*>(&P32),4);
    out.write(reinterpret_cast<char*>(&pad),4);

    /* zero-filled payload buffer */
    std::vector<char> payload(P, 0);          // ← all zeros

    for (uint64_t i=0;i<N;++i) {
        uint64_t key = splitmix64(i);
        out.write(reinterpret_cast<char*>(&key),8);
        out.write(payload.data(),P);
    }
    std::cout<<"Written "<<N<<" records (payload "<<P<<" B) → "<<fname<<"\n";
    return 0;
}